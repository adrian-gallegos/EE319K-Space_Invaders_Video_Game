


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         ; Runs on TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; SSD1306_OutChar   outputs a single 8-bit ASCII charact
                       er
   10 00000000         ; SSD1306_OutString outputs a null-terminated string 
   11 00000000         
   12 00000000                 IMPORT           SSD1306_OutChar
   13 00000000                 IMPORT           SSD1306_OutString
   14 00000000                 EXPORT           LCD_OutDec
   15 00000000                 EXPORT           LCD_OutFix
   16 00000000                 PRESERVE8
   17 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   18 00000000                 THUMB
   19 00000000         
   20 00000000 00000004 
                       N       EQU              4
   21 00000000 00000000 
                       CNT     EQU              0
   22 00000000        B 
                       FP      RN               11
   23 00000000         
   24 00000000         ;-----------------------LCD_OutDec----------------------
                       -
   25 00000000         ; Output a 32-bit number in unsigned decimal format
   26 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   27 00000000         ; Output: none
   28 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   29 00000000         LCD_OutDec
   30 00000000 E92D 0FF0       PUSH             {R4-R11}
   31 00000004         ; Init1
   32 00000004 B401            PUSH             {R0}        ; Store number N on
                                                             stack
   33 00000006 B081            SUB              SP, SP, #4  ; Make space for co
                                                            unt (Subtract SP by
                                                             4)
   34 00000008 46EB            MOV              FP, SP      ; Make SP your fram
                                                            e pointer
   35 0000000A         
   36 0000000A         ; Init2
   37 0000000A B500            PUSH             {LR}        ; Store LR on stack
                                                            
   38 0000000C F04F 0100       MOV              R1, #0
   39 00000010 F8CB 1000       STR              R1, [FP,#CNT] 
                                                            ; Store count as 0
   40 00000014 F04F 010A       MOV              R1, #10     ; Load a reg with #
                                                            10 for division
   41 00000018         
   42 00000018         Readloop



ARM Macro Assembler    Page 2 


   43 00000018         ; Step 1
   44 00000018 F8DB 2000       LDR              R2, [FP,#CNT]
   45 0000001C F102 0201       ADD              R2, #1
   46 00000020 F8CB 2000       STR              R2, [FP,#CNT]
   47 00000024         ; Step 2
   48 00000024 F8DB 3004       LDR              R3, [FP,#N] ; Load current valu
                                                            e of N to reg1 <- R
                                                            3
   49 00000028 461C            MOV              R4, R3      ; Make a copy in re
                                                            g2 <- R4
   50 0000002A FBB3 F3F1       UDIV             R3, R1      ; Unsigned divide r
                                                            eg1 by 10 in reg1
   51 0000002E F8CB 3004       STR              R3, [FP,#N] ; Store this reg1 a
                                                            s new N
   52 00000032 FB03 F301       MUL              R3, R1      ; Multiply this reg
                                                            1 to 10 in reg1
   53 00000036 EBA4 0403       SUB              R4, R3      ; R4-R3
   54 0000003A B410            PUSH             {R4}        ; Store this differ
                                                            ence to stack
   55 0000003C         ; Step 3
   56 0000003C F8DB 3004       LDR              R3, [FP,#N] ; Load new N
   57 00000040 2B00            CMP              R3, #0      ; Check if N is 0
   58 00000042 D1E9            BNE              Readloop
   59 00000044         Writeloop
   60 00000044         ; Step 4
   61 00000044 466D            MOV              R5, SP
   62 00000046 BC20            POP              {R5}        ; POP value from st
                                                            ack
   63 00000048 F105 0030       ADD              R0, R5, #0x30 ; Add 0x30 b/c of
                                                             ASCII char
   64 0000004C F7FF FFFE       BL               SSD1306_OutChar
   65 00000050         ; Step 5
   66 00000050 F8DB 3000       LDR              R3, [FP, #CNT]
   67 00000054 F1A3 0301       SUB              R3, #1
   68 00000058 F8CB 3000       STR              R3, [FP, #CNT]
   69 0000005C         ; Step 6
   70 0000005C 2B00            CMP              R3, #0
   71 0000005E D1F1            BNE              Writeloop
   72 00000060         ; Step 7
   73 00000060 F85D EB04       POP              {LR}
   74 00000064 B002            ADD              SP, #8
   75 00000066         
   76 00000066 E8BD 0FF0       POP              {R4-R11}
   77 0000006A 4770            BX               LR
   78 0000006C         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
   79 0000006C         
   80 0000006C         ; -----------------------LCD _OutFix--------------------
                       --
   81 0000006C         ; Output characters to LCD display in fixed-point format
                       
   82 0000006C         ; unsigned decimal, resolution 0.01, range 0.00 to 9.99
   83 0000006C         ; Inputs:  R0 is an unsigned 32-bit number
   84 0000006C         ; Outputs: none
   85 0000006C         ; E.g., R0=0,    then output "0.00 "
   86 0000006C         ;       R0=3,    then output "0.03 "
   87 0000006C         ;       R0=89,   then output "0.89 "
   88 0000006C         ;       R0=123,  then output "1.23 "
   89 0000006C         ;       R0=999,  then output "9.99 "
   90 0000006C         ;       R0>999,  then output "*.** "



ARM Macro Assembler    Page 3 


   91 0000006C         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   92 0000006C         LCD_OutFix
   93 0000006C E92D 0FF0       PUSH             {R4-R11}
   94 00000070         
   95 00000070         ; Init1
   96 00000070 B401            PUSH             {R0}        ; Store number N on
                                                             stack
   97 00000072 B081            SUB              SP, SP, #4  ; Make space for co
                                                            unt (Subtract SP by
                                                             4)
   98 00000074 46EB            MOV              FP, SP      ; Make SP your fram
                                                            e pointer
   99 00000076         
  100 00000076         ; Init2
  101 00000076 B500            PUSH             {LR}        ; Store LR on stack
                                                            
  102 00000078 F04F 0100       MOV              R1, #0
  103 0000007C F8CB 1000       STR              R1, [FP,#CNT] 
                                                            ; Store count as 0
  104 00000080 F04F 010A       MOV              R1, #10     ; Load a reg with #
                                                            10 for division
  105 00000084         
  106 00000084         ; Step 1
  107 00000084 F8DB 2004       LDR              R2, [FP,#N]
  108 00000088 F5B2 7F7A       CMP              R2, #1000
  109 0000008C D310            BLO              InRange
  110 0000008E         ; Step 2
  111 0000008E F04F 002A       MOV              R0, #0x2A
  112 00000092 F7FF FFFE       BL               SSD1306_OutChar
  113 00000096         ; Step 3
  114 00000096 F04F 002E       MOV              R0, #0x2E
  115 0000009A F7FF FFFE       BL               SSD1306_OutChar
  116 0000009E         ; Step 4
  117 0000009E F04F 002A       MOV              R0, #0x2A
  118 000000A2 F7FF FFFE       BL               SSD1306_OutChar
  119 000000A6         ; Step 5
  120 000000A6 F04F 002A       MOV              R0, #0x2A
  121 000000AA F7FF FFFE       BL               SSD1306_OutChar
  122 000000AE E02B            B                Exit
  123 000000B0         InRange
  124 000000B0         ; Step 6
  125 000000B0 F8DB 2000       LDR              R2, [FP,#CNT]
  126 000000B4 F102 0201       ADD              R2, #1
  127 000000B8 F8CB 2000       STR              R2, [FP,#CNT]
  128 000000BC         ; Step 7
  129 000000BC F8DB 3004       LDR              R3, [FP,#N] ; Load current valu
                                                            e of N to reg1 <- R
                                                            3
  130 000000C0 461C            MOV              R4, R3      ; Make a copy in re
                                                            g2 <- R4
  131 000000C2 FBB3 F3F1       UDIV             R3, R1      ; Unsigned divide r
                                                            eg1 by 10 in reg1
  132 000000C6 F8CB 3004       STR              R3, [FP,#N] ; Store this reg1 a
                                                            s new N
  133 000000CA FB03 F301       MUL              R3, R1      ; Multiply this reg
                                                            1 to 10 in reg1
  134 000000CE EBA4 0403       SUB              R4, R3      ; R4-R3
  135 000000D2 B410            PUSH             {R4}        ; Store this differ



ARM Macro Assembler    Page 4 


                                                            ence to stack
  136 000000D4         ; Step 8
  137 000000D4 F8DB 2000       LDR              R2, [FP,#CNT]
  138 000000D8 2A03            CMP              R2, #3
  139 000000DA D3E9            BLO              InRange
  140 000000DC         ; Step 9
  141 000000DC 466D            MOV              R5, SP
  142 000000DE BC20            POP              {R5}        ; POP value from st
                                                            ack
  143 000000E0 F105 0030       ADD              R0, R5, #0x30 ; Add 0x30 b/c of
                                                             ASCII char
  144 000000E4 F7FF FFFE       BL               SSD1306_OutChar
  145 000000E8         
  146 000000E8 F04F 002E       MOV              R0, #0x2E
  147 000000EC F7FF FFFE       BL               SSD1306_OutChar
  148 000000F0         
  149 000000F0 466D            MOV              R5, SP
  150 000000F2 BC20            POP              {R5}        ; POP value from st
                                                            ack
  151 000000F4 F105 0030       ADD              R0, R5, #0x30 ; Add 0x30 b/c of
                                                             ASCII char
  152 000000F8 F7FF FFFE       BL               SSD1306_OutChar
  153 000000FC         
  154 000000FC 466D            MOV              R5, SP
  155 000000FE BC20            POP              {R5}        ; POP value from st
                                                            ack
  156 00000100 F105 0030       ADD              R0, R5, #0x30 ; Add 0x30 b/c of
                                                             ASCII char
  157 00000104 F7FF FFFE       BL               SSD1306_OutChar
  158 00000108         
  159 00000108         Exit
  160 00000108         ; Step 10
  161 00000108 F85D EB04       POP              {LR}
  162 0000010C B002            ADD              SP, #8
  163 0000010E         
  164 0000010E E8BD 0FF0       POP              {R4-R11}
  165 00000112 4770            BX               LR
  166 00000114         
  167 00000114         ;ALIGN
  168 00000114         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  169 00000114         
  170 00000114                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  171 00000114                 END                          ; end of file
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\print.d -o.\print.o -I.\RTE\_Lab10 -I"C:\Users\Adrian Gallegos\A
ppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include" -I"C:\Users\Adrian G
allegos\AppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123" --p
redefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 533" --predefine="
_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1" --li
st=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 17 in file Print.s
   Uses
      None
Comment: .text unused
Exit 00000108

Symbol: Exit
   Definitions
      At line 159 in file Print.s
   Uses
      At line 122 in file Print.s
Comment: Exit used once
InRange 000000B0

Symbol: InRange
   Definitions
      At line 123 in file Print.s
   Uses
      At line 109 in file Print.s
      At line 139 in file Print.s

LCD_OutDec 00000000

Symbol: LCD_OutDec
   Definitions
      At line 29 in file Print.s
   Uses
      At line 14 in file Print.s
Comment: LCD_OutDec used once
LCD_OutFix 0000006C

Symbol: LCD_OutFix
   Definitions
      At line 92 in file Print.s
   Uses
      At line 15 in file Print.s
Comment: LCD_OutFix used once
Readloop 00000018

Symbol: Readloop
   Definitions
      At line 42 in file Print.s
   Uses
      At line 58 in file Print.s
Comment: Readloop used once
Writeloop 00000044

Symbol: Writeloop
   Definitions
      At line 59 in file Print.s
   Uses
      At line 71 in file Print.s
Comment: Writeloop used once
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

CNT 00000000

Symbol: CNT
   Definitions
      At line 21 in file Print.s
   Uses
      At line 39 in file Print.s
      At line 44 in file Print.s
      At line 46 in file Print.s
      At line 66 in file Print.s
      At line 68 in file Print.s
      At line 103 in file Print.s
      At line 125 in file Print.s
      At line 127 in file Print.s
      At line 137 in file Print.s

N 00000004

Symbol: N
   Definitions
      At line 20 in file Print.s
   Uses
      At line 48 in file Print.s
      At line 51 in file Print.s
      At line 56 in file Print.s
      At line 107 in file Print.s
      At line 129 in file Print.s
      At line 132 in file Print.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SSD1306_OutChar 00000000

Symbol: SSD1306_OutChar
   Definitions
      At line 12 in file Print.s
   Uses
      At line 64 in file Print.s
      At line 112 in file Print.s
      At line 115 in file Print.s
      At line 118 in file Print.s
      At line 121 in file Print.s
      At line 144 in file Print.s
      At line 147 in file Print.s
      At line 152 in file Print.s
      At line 157 in file Print.s

SSD1306_OutString 00000000

Symbol: SSD1306_OutString
   Definitions
      At line 13 in file Print.s
   Uses
      None
Comment: SSD1306_OutString unused
2 symbols
345 symbols in table
